/*
Создайте класс, который описывает вектор (в трёхмерном пространстве).

У него должны быть:

  — конструктор с параметрами в виде списка координат x, y, z

  — метод, вычисляющий длину вектора. Корень можно посчитать с помощью Math.sqrt():
	$\sqrt{x^2 + y^2 + z^2}$

  — метод, вычисляющий скалярное произведение:
    $x_1x_2 + y_1y_2 + z_1z_2$

  — метод, вычисляющий векторное произведение с другим вектором:
    $(y_1z_2 - z_1y_2, z_1x_2 - x_1z_2, x_1y_2 - y_1x_2)$

  — метод, вычисляющий угол между векторами (или косинус угла): косинус угла между векторами равен скалярному произведению векторов, деленному на произведение модулей (длин) векторов:
    $\frac{(a,b)}{|a| \cdot |b|}$

  — методы для суммы и разности:
    $(x_1 + x_2, y_1 + y_2, z_1 + z_2)$
    $(x_1 - x_2, y_1 - y_2, z_1 - z_2)$

  — статический метод, который принимает целое число N, и возвращает массив случайных векторов размером N.


Если метод возвращает вектор, то он должен возвращать новый объект, а не менять базовый. То есть, нужно реализовать шаблон "Неизменяемый объект"
 */

package Task_02_0;

import java.util.Locale;

public class Main {
	public static void main(String args[]) {
		Locale.setDefault(Locale.US);

		Vector vec1 = new Vector(1.5, 1.12, 2.6);	// Инициализация вектора 1
		Vector vec2 = new Vector(2.0, 1.7, 8.1);	// Инициализация вектора 2

		System.out.printf("%.2f\n", vec1.getLength());		// Вывод длины вектора

		System.out.printf("%.2f\n", vec1.dotProduct(vec2));	// Вывод скалярного произведения векторов 1 и 2

		Vector vecResult = vec1.crossProduct(vec2);			// Векторное произведение векторов 1 и 2
		vecResult.printCoordinates();						// Вывод результата

		System.out.printf("cos: %.2f (%.2f rad)\n",			// Вывод угла между векторами:
				vec1.getAngle(vec2, true),			// косинус,
				vec1.getAngle(vec2, false));			// угол в радианах

		Vector vecSum = vec1.sum(vec2);						// Сумма векторов 1 и 2
		vecSum.printCoordinates();							// Вывод результата

		Vector vecDif = vec1.dif(vec2);						// Разность векторов 1 и 2
		vecDif.printCoordinates();							// Вывод результата

		Vector vectors[] = Vector.generateVectors(4);	// Генерация случайных векторов
		for (Vector vec : vectors) vec.printCoordinates();	// Вывод координат случайных векторов
	}
}
